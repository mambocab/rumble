from __future__ import division

from tabulate import tabulate


class SimpleTabulator():
    def __init__(self, results, title):
        self._results = tuple(results)
        self._title = title

    def generate_row(self, result):
        return (result.timedfunction.__name__,
                result.best,
                result.number,  # number of loops / repeat
                result.repeat)

    def render_table(self):
        """Generate the table for this object's results as a string."""
        # find the string for the units and the divisor to convert from usecs
        units, unit_divisor = self.units_and_divisor(min(r.best for r in
                                                         self._results))
        # convert each result to its display value
        normalized_results = tuple(r._replace(best=r.best / unit_divisor)
                                   for r in self._results)

        table = tuple(self.generate_row(r) for r in normalized_results)
        return tabulate(table, tablefmt='simple', floatfmt='.2f',
                        headers=self.header(self._title, units))

    def header(self, title, units):
        """Generate the header for the table generated by this object as a
        string."""
        return ('args: {title}'.format(title=title),
                units, 'loops', 'best of')

    def units_and_divisor(self, smallest):
        """Get the unit name and a number that converts to those units from
        usecs"""
        for name, div in (('sec', 1000000), ('msec', 1000)):
            if smallest > div:
                return name, div
        return 'usec', 1


def generate_table(results, title):
    return SimpleTabulator(results, title).render_table()
