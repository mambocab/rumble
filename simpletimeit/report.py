from __future__ import division

from tabulate import tabulate


def units_and_divisor(smallest):
    for name, div in (('sec', 1000000), ('msec', 1000)):
        if smallest > div:
            return name, div
    return 'usec', 1


class SimpleTableGenerator():

    def __init__(self, results, title, floatfmt='.2f', tablefmt='simple'):
        self._results = tuple(results)
        self._title = title
        self._floatfmt = floatfmt
        self._tablefmt = tablefmt

    def render_table(self):
        """Generate the table for this object's results as a string."""
        units, unit_divisor = units_and_divisor(min(r.best
                                                    for r in self._results))
        table = [[r.timedfunction.__name__,
                  r.best / unit_divisor,
                  r.number,  # number of loops / repeat
                  r.repeat]  # number of repeats
                 for r in self._results]

        return tabulate(table, tablefmt=self._tablefmt,
                        floatfmt=self._floatfmt, headers=self.header())

    def header(self):
        """Generate the header for the table generated by this object as a
        string."""
        return ('args: {title}'.format(title=self._title), self.units(),
                'loops', 'best of')

def generate_table(results, title):
    return SimpleTableGenerator(results, title).render_table()
